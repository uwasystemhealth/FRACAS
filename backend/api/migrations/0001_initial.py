# Generated by Django 4.2.5 on 2023-09-21 07:31

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text=(
                            "Designates that this user has all permissions without"
                            " explicitly assigning them."
                        ),
                        verbose_name="superuser status",
                    ),
                ),
                ("username", models.CharField(max_length=50, unique=True)),
                ("first_name", models.CharField(blank=True, max_length=50, null=True)),
                ("last_name", models.CharField(blank=True, max_length=50, null=True)),
                ("email", models.EmailField(max_length=50, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_admin", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text=(
                            "The groups this user belongs to. A user will get all"
                            " permissions granted to each of their groups."
                        ),
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                ("team_id", models.AutoField(primary_key=True, serialize=False)),
                ("team_name", models.CharField(max_length=100, unique=True)),
                (
                    "team_lead",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="team_lead",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Subsystem",
            fields=[
                ("subsystem_id", models.AutoField(primary_key=True, serialize=False)),
                ("subsystem_name", models.CharField(max_length=100, unique=True)),
                (
                    "parent_team",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.team",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                ("record_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "is_deleted",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("status", models.TextField(blank=True, null=True)),
                ("record_creator", models.TextField(blank=True, null=True)),
                ("record_owner", models.TextField(blank=True, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.team",
                    ),
                ),
                ("car_year", models.TextField(blank=True, null=True)),
                (
                    "failure_time",
                    models.DateTimeField(
                        blank=True, default=django.utils.timezone.now, null=True
                    ),
                ),
                ("failure_title", models.TextField(blank=True, null=True)),
                ("failure_description", models.TextField(blank=True, null=True)),
                ("failure_impact", models.TextField(blank=True, null=True)),
                ("failure_cause", models.TextField(blank=True, null=True)),
                ("failure_mechanism", models.TextField(blank=True, null=True)),
                ("corrective_action_plan", models.TextField(blank=True, null=True)),
                ("team_lead", models.TextField(blank=True, null=True)),
                (
                    "record_creation_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                ("resolve_date", models.DateTimeField(blank=True, null=True)),
                ("resolution_status", models.TextField(blank=True, null=True)),
                ("review_date", models.DateTimeField(blank=True, null=True)),
                (
                    "is_resolved",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "is_record_validated",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "is_analysis_validated",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "is_correction_validated",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "is_reviewed",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "subsystem",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.subsystem",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                ("comment_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "creation_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("comment_text", models.TextField()),
                (
                    "commenter",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_comment_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.comment",
                    ),
                ),
                (
                    "record_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.record"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="teams",
                to="api.team",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
