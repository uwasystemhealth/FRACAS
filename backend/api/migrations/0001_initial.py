# Generated by Django 4.2.5 on 2023-09-18 10:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                ("category_id", models.AutoField(primary_key=True, serialize=False)),
                ("category_name", models.TextField(unique=True)),
            ],
            options={
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text=(
                            "Designates that this user has all permissions without"
                            " explicitly assigning them."
                        ),
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text=(
                            "Required. 150 characters or fewer. Letters, digits and"
                            " @/./+/-/_ only."
                        ),
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text=(
                            "Designates whether the user can log into this admin site."
                        ),
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text=(
                            "Designates whether this user should be treated as active."
                            " Unselect this instead of deleting accounts."
                        ),
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True, related_name="custom_users", to="auth.group"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True, related_name="custom_users", to="auth.permission"
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="SubCategory",
            fields=[
                ("subcategory_id", models.AutoField(primary_key=True, serialize=False)),
                ("subcategory_name", models.TextField(unique=True)),
                (
                    "parent_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.category"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Subcategories",
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                ("team_id", models.AutoField(primary_key=True, serialize=False)),
                ("team_name", models.TextField()),
                (
                    "team_lead",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="teams",
                to="api.team",
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="team_lead",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="team_leads",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text=(
                    "The groups this user belongs to. A user will get all permissions"
                    " granted to each of their groups."
                ),
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="team_name",
            field=models.TextField(unique=True),
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                ("record_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "is_deleted",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                ("status", models.TextField(blank=True, null=True)),
                (
                    "record_creation_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("team_lead", models.TextField(blank=True, null=True)),
                ("subsystem", models.TextField(blank=True, null=True)),
                ("car_year", models.TextField(blank=True, null=True)),
                (
                    "failure_time",
                    models.DateTimeField(
                        blank=True, default=django.utils.timezone.now, null=True
                    ),
                ),
                ("failure_title", models.TextField(blank=True, null=True)),
                ("failure_description", models.TextField(blank=True, null=True)),
                ("failure_impact", models.TextField(blank=True, null=True)),
                ("failure_cause", models.TextField(blank=True, null=True)),
                ("failure_mechanism", models.TextField(blank=True, null=True)),
                ("response_action_plan", models.TextField(blank=True, null=True)),
                ("corrective_action_plan", models.TextField(blank=True, null=True)),
                ("resolution_status", models.TextField(blank=True, null=True)),
                ("review_date", models.DateTimeField(blank=True, null=True)),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                (
                    "is_resolved",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("resolve_date", models.DateTimeField(blank=True, null=True)),
                (
                    "is_record_validated",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "is_analysis_validated",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "is_correction_validated",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "is_reviewed",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="record_category",
                        to="api.category",
                    ),
                ),
                ("record_creator", models.TextField(blank=True, null=True)),
                ("record_owner", models.TextField(blank=True, null=True)),
                (
                    "subcategory",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="record_subcategory",
                        to="api.subcategory",
                    ),
                ),
                ("team", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                ("comment_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "creation_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("comment_text", models.TextField()),
                (
                    "commenter",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="commented",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_comment_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.comment",
                    ),
                ),
                (
                    "record_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.record"
                    ),
                ),
            ],
        ),
    ]
